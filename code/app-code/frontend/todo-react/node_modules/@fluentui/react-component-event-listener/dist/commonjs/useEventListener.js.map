{"version":3,"sources":["useEventListener.ts"],"names":["isActionSupported","element","method","useEventListener","options","capture","listener","type","target","targetRef","latestListener","React","useRef","current","eventHandler","useCallback","event","process","env","NODE_ENV","useEffect","Error","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AAIA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,OADwB,EAExBC,MAFwB;AAAA,SAGDD,OAAO,GAAG,CAAC,CAACA,OAAO,CAACC,MAAD,CAAZ,GAAuB,KAH7B;AAAA,CAA1B;;AAKO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAuBC,OAAvB,EAAkE;AAAA,MACxFC,OADwF,GACzCD,OADyC,CACxFC,OADwF;AAAA,MAC/EC,QAD+E,GACzCF,OADyC,CAC/EE,QAD+E;AAAA,MACrEC,IADqE,GACzCH,OADyC,CACrEG,IADqE;AAAA,MAC/DC,MAD+D,GACzCJ,OADyC,CAC/DI,MAD+D;AAAA,MACvDC,SADuD,GACzCL,OADyC,CACvDK,SADuD;AAGhG,MAAMC,cAAc,GAAGC,KAAK,CAACC,MAAN,CAA8BN,QAA9B,CAAvB;AACAI,EAAAA,cAAc,CAACG,OAAf,GAAyBP,QAAzB;AAEA,MAAMQ,YAAY,GAAGH,KAAK,CAACI,WAAN,CAAkB,UAACC,KAAD,EAAgC;AACrE,WAAON,cAAc,CAACG,OAAf,CAAuBG,KAAvB,CAAP;AACD,GAFoB,EAElB,EAFkB,CAArB;;AAIA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA;AACAR,IAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,UAAI,OAAOZ,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAA1D,EAAuE;AACrE,cAAM,IAAIY,KAAJ,CAAU,gFAAV,CAAN;AACD;;AAED,UAAI,OAAOb,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAA1D,EAAuE;AACrE,cAAM,IAAIY,KAAJ,CAAU,kFAAV,CAAN;AACD;AACF,KARD,EAQG,CAACb,MAAD,EAASC,SAAT,CARH;AASD;;AAEDE,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,QAAMnB,OAAkC,GAAG,OAAOQ,SAAP,KAAqB,WAArB,GAAmCD,MAAnC,GAA4CC,SAAS,CAACI,OAAjG;;AAEA,QAAIb,iBAAiB,CAACC,OAAD,EAAU,kBAAV,CAArB,EAAoD;AAClDA,MAAAA,OAAO,CAACqB,gBAAR,CAAyBf,IAAzB,EAA+BO,YAA/B,EAA6CT,OAA7C;AACD,KAFD,MAEO,IAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD,YAAM,IAAIE,KAAJ,CACJ,0HADI,CAAN;AAGD;;AAED,WAAO,YAAM;AACX,UAAIrB,iBAAiB,CAACC,OAAD,EAAU,qBAAV,CAArB,EAAuD;AACrDA,QAAAA,OAAO,CAACsB,mBAAR,CAA4BhB,IAA5B,EAAkCO,YAAlC,EAAgDT,OAAhD;AACD,OAFD,MAEO,IAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD,cAAM,IAAIE,KAAJ,CACJ,6HADI,CAAN;AAGD;AACF,KARD;AASD,GApBD,EAoBG,CAAChB,OAAD,EAAUS,YAAV,EAAwBN,MAAxB,EAAgCC,SAAhC,EAA2CF,IAA3C,CApBH;AAqBD,CA9CM","sourcesContent":["import * as React from 'react';\n\nimport { EventHandler, EventListenerOptions, EventTypes, Target } from './types';\n\nconst isActionSupported = (\n  element: Target | null | undefined,\n  method: 'addEventListener' | 'removeEventListener',\n): element is Target => (element ? !!element[method] : false);\n\nexport const useEventListener = <T extends EventTypes>(options: EventListenerOptions<T>): void => {\n  const { capture, listener, type, target, targetRef } = options;\n\n  const latestListener = React.useRef<EventHandler<T>>(listener);\n  latestListener.current = listener;\n\n  const eventHandler = React.useCallback((event: DocumentEventMap[T]) => {\n    return latestListener.current(event);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(() => {\n    const element: Target | null | undefined = typeof targetRef === 'undefined' ? target : targetRef.current;\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, eventHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.',\n      );\n    }\n\n    return () => {\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, eventHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.',\n        );\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};\n"],"file":"useEventListener.js"}