{"version":3,"sources":["RefFindNode.tsx"],"names":["isFiberRef","node","Element","Text","type","tag","RefFindNode","prevNode","componentDidMount","currentNode","ReactDOM","findDOMNode","process","env","NODE_ENV","props","innerRef","componentDidUpdate","prevProps","componentWillUnmount","render","children","React","Component"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AAaA;;;;;;;AAOA,SAASA,UAAT,CAAoBC,IAApB,EAAkE;AAChE,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,KAAP;AACD;;AAED,MAAIA,IAAI,YAAYC,OAAhB,IAA2BD,IAAI,YAAYE,IAA/C,EAAqD;AACnD,WAAO,KAAP;AACD;;AAED,SAAO,CAAC,EAAEF,IAAI,CAACG,IAAL,IAAaH,IAAI,CAACI,GAApB,CAAR;AACD;;IAEYC,W;;;;;;;;;;;UACXC,Q,GAAwB,I;;;;;;SAExBC,iB,GAAA,6BAAoB;AAClB,QAAIC,WAAW,GAAGC,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAAlB;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAId,UAAU,CAACS,WAAD,CAAd,EAA6B;AAC3BA,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,SAAKF,QAAL,GAAgBE,WAAhB;AACA,0BAAU,KAAKM,KAAL,CAAWC,QAArB,EAA+BP,WAA/B;AACD,G;;SAEDQ,kB,GAAA,4BAAmBC,SAAnB,EAAwC;AACtC,QAAIT,WAAW,GAAGC,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAAlB;;AAEA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAId,UAAU,CAACS,WAAD,CAAd,EAA6B;AAC3BA,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,QAAI,KAAKF,QAAL,KAAkBE,WAAtB,EAAmC;AACjC,WAAKF,QAAL,GAAgBE,WAAhB;AACA,4BAAU,KAAKM,KAAL,CAAWC,QAArB,EAA+BP,WAA/B;AACD;;AAED,QAAIS,SAAS,CAACF,QAAV,KAAuB,KAAKD,KAAL,CAAWC,QAAtC,EAAgD;AAC9C,4BAAU,KAAKD,KAAL,CAAWC,QAArB,EAA+BP,WAA/B;AACD;AACF,G;;SAEDU,oB,GAAA,gCAAuB;AACrB,0BAAU,KAAKJ,KAAL,CAAWC,QAArB,EAA+B,IAA/B;AAEA,WAAO,KAAKT,QAAZ;AACD,G;;SAEDa,M,GAAA,kBAAS;AAAA,QACCC,QADD,GACc,KAAKN,KADnB,CACCM,QADD;AAGP,WAAOA,QAAP;AACD,G;;;EA7C8BC,KAAK,CAACC,S","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\ntype Fiber = {\n  // Tag identifying the type of fiber.\n  tag: string;\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n};\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node: Element | Fiber | Text | null): boolean {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode: Node | null = null;\n\n  componentDidMount() {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"],"file":"RefFindNode.js"}